서블릿 : 자바 기반의 웹 프로그램 개발을 위해 만들어진 기술이다.

REST : 네트워크상에서 클라이언트와 서버 사이의 통신을 구현하는 방법중 하나이다.



HttpServletRequest는 클라이언트가 서버에 보내는 요청정보를 처리하는 객체이고, HttpServletResponse는 서버가 클라이언트로 보내는 응답정보를 처리하는 객체입니다.

request : 사용자 요청 처리
response : 응답 처리

doGet
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 GET 요청을 받았을 때 호출

doPost
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 POST 요청을 받았을 때 호출

doPut
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 PUT 요청을 받았을 때 호출

doDelete
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 DELETE 요청을 받았을 때 호출

doHead
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 <he></he>AD 요청을 받았을 때 호출

doOptions
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 OPTIONS 요청을 받았을 때 호출

doTrace
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 TRACE 요청을 받았을 때 호출

service
(HttpServletRequest req, HttpServletResponse resp)	모든 HTTP 요청에 대해 호출
요청 메소드를 분석하여 각각의 메소드에 대응하는 doXXX() 메소드를 호출합니다.

init()	서블릿이 초기화될 때 호출
서블릿에서 사용할 데이터베이스 연결 등을 초기화하거나, 설정 정보를 로딩

destroy()	서블릿이 종료될 때 호출
서블릿에서 사용한 리소스를 해제하거나, 정리 작업을 수행

form 태그에서 GET방식에서는
response.setContentType("text/html; charset=UTF-8");

		   POST방식에서는
request.setCharacterEncoding("UTF-8");
response.setContentType("text/html; charset=UTF-8");

html에서 servlet파일로 파라미터 값을 전달할떄는 html에서는 무조건 고유한 name으로만 가능하다.


JSP---------------------
Language : 현재페이지의 스크립트 언어를 지정하는 속성
contentType : 현재페이지의 파일형식을 지정하는 속성이다
pageEncoding : 파일을 컨테이너가 처리할때 사용하는 캐릭터 인코딩을 지정하는 속성이다.
import : jsp 파일 내에서 자바 코드를 직접 사용하는 경우 일반 자바 코드와 마찬가지로 클래스에 대한 패키지 import가 필요하다
errorPage : 현재 jsp요청 처리중에 에러가 발생하는 경우 서버 에러를 클라이언트에 전달하지 않고 별도의 페이지에서 처리하기 위한 속성이다.


--------------------------
include 지시어 : 다른 파일을 포함하기 위한 지시어
				사용된 위치에 특정 파일을 불러옴
				ex) <%@ include file ="파일위치"%>


<%@ %> : 주로 파일관련된것들일때 사용된다				
<%! %> : 선언을 의미한다 (메소드)
<%= %> : html로 출력할떄 사용한다 (표현태그)
<% %> : 는 자바코드같은것들을 사용할때 사용한다 
ex) 
		<%
		for (String name : member) {
		%>
		<li><%=name%></li>
		<%
		}
		%>
		
		
request.setAttribute("num1", num2);
value가 num2인것을 num1이름으로 지정한다.	


<!-- 원하는 페이지로 이동 -->

<!-- 세페이지 앞으로 가기 -->
<a href="javascript:history.go(3)">세페이지 뒤로가기</a>

<!-- 두페이지 앞으로 가기 -->
<a href="javascript:history.go(2)">두페이지 뒤로가기</a>

<!-- 한페이지 앞으로 가기 -->
<a href="javascript:history.go(1)">한페이지 뒤로가기</a>

<!-- 현재 페이지 reload -->
<a href="javascript:history.go()">현재 페이지 리로드</a>

<!-- 현재 페이지 reload -->
<a href="javascript:history.go(0)">현재 페이지 리로드</a>


<!-- 이전페이지로 이동 -->
<a href="javascript:history.back();">이전 페이지로 이동</a>

<!-- 다음페이지로 이동 -->
<a href="javascript:history.forword();">다음페이지로 이동</a>

페이지이동
<% response.sendRedirect("https://www.naver.com"); %>

세션 : 웹브라우저를 닫기전까지 페이지를 이동하더라도 정보를 저장할수 있는 객체



RequestDispatcher dispatcher = request.getRequestDispatcher("2.jsp");
dispatcher.forward(request,response);
Dispatcher 는 1번페이지에서 받은 데이터를 2번페이지로 넘긴다 


Bean 생성
<jsp:useBean id="member" class="mit.bean.MemberBean"/>
mit.bean.MemberBean 경로에 있는 Bean을 member로 만든다

자바 빈 객체 생성후 저장된 정보 출력하기 <br /> <br />
이름 : <%=member.getName() %> <br />
아이디 : <%= member.getUserid() %>

<hr />
정보 변경 후 출력하기 <br /> <br />
<% member.setName("박주형"); 
   member.setUserid("asdf");%>

이름 : <%=member.getName() %> <br />
아이디 : <%= member.getUserid() %>   

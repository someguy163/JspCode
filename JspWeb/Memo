서블릿 : 자바 기반의 웹 프로그램 개발을 위해 만들어진 기술이다.

REST : 네트워크상에서 클라이언트와 서버 사이의 통신을 구현하는 방법중 하나이다.



HttpServletRequest는 클라이언트가 서버에 보내는 요청정보를 처리하는 객체이고, HttpServletResponse는 서버가 클라이언트로 보내는 응답정보를 처리하는 객체입니다.

request : 사용자 요청 처리
response : 응답 처리

doGet
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 GET 요청을 받았을 때 호출

doPost
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 POST 요청을 받았을 때 호출

doPut
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 PUT 요청을 받았을 때 호출

doDelete
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 DELETE 요청을 받았을 때 호출

doHead
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 <he></he>AD 요청을 받았을 때 호출

doOptions
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 OPTIONS 요청을 받았을 때 호출

doTrace
(HttpServletRequest req, HttpServletResponse resp)	클라이언트로부터 TRACE 요청을 받았을 때 호출

service
(HttpServletRequest req, HttpServletResponse resp)	모든 HTTP 요청에 대해 호출
요청 메소드를 분석하여 각각의 메소드에 대응하는 doXXX() 메소드를 호출합니다.

init()	서블릿이 초기화될 때 호출
서블릿에서 사용할 데이터베이스 연결 등을 초기화하거나, 설정 정보를 로딩

destroy()	서블릿이 종료될 때 호출
서블릿에서 사용한 리소스를 해제하거나, 정리 작업을 수행

form 태그에서 GET방식에서는
response.setContentType("text/html; charset=UTF-8");

		   POST방식에서는
request.setCharacterEncoding("UTF-8");
response.setContentType("text/html; charset=UTF-8");

html에서 servlet파일로 파라미터 값을 전달할떄는 html에서는 무조건 고유한 name으로만 가능하다.


JSP---------------------
Language : 현재페이지의 스크립트 언어를 지정하는 속성
contentType : 현재페이지의 파일형식을 지정하는 속성이다
pageEncoding : 파일을 컨테이너가 처리할때 사용하는 캐릭터 인코딩을 지정하는 속성이다.
import : jsp 파일 내에서 자바 코드를 직접 사용하는 경우 일반 자바 코드와 마찬가지로 클래스에 대한 패키지 import가 필요하다
errorPage : 현재 jsp요청 처리중에 에러가 발생하는 경우 서버 에러를 클라이언트에 전달하지 않고 별도의 페이지에서 처리하기 위한 속성이다.


--------------------------
include 지시어 : 다른 파일을 포함하기 위한 지시어
				사용된 위치에 특정 파일을 불러옴
				ex) <%@ include file ="파일위치"%>


<%@ %> : 주로 파일관련된것들일때 사용된다				
<%! %> : 선언을 의미한다 (메소드)
<%= %> : html로 출력할떄 사용한다 (표현태그)
<% %> : 는 자바코드같은것들을 사용할때 사용한다 
ex) 
		<%
		for (String name : member) {
		%>
		<li><%=name%></li>
		<%
		}
		%>
		
		
request.setAttribute("num1", num2);
value가 num2인것을 num1이름으로 지정한다.	


<!-- 원하는 페이지로 이동 -->

<!-- 세페이지 앞으로 가기 -->
<a href="javascript:history.go(3)">세페이지 뒤로가기</a>

<!-- 두페이지 앞으로 가기 -->
<a href="javascript:history.go(2)">두페이지 뒤로가기</a>

<!-- 한페이지 앞으로 가기 -->
<a href="javascript:history.go(1)">한페이지 뒤로가기</a>

<!-- 현재 페이지 reload -->
<a href="javascript:history.go()">현재 페이지 리로드</a>

<!-- 현재 페이지 reload -->
<a href="javascript:history.go(0)">현재 페이지 리로드</a>


<!-- 이전페이지로 이동 -->
<a href="javascript:history.back();">이전 페이지로 이동</a>

<!-- 다음페이지로 이동 -->
<a href="javascript:history.forword();">다음페이지로 이동</a>

페이지이동
<% response.sendRedirect("https://www.naver.com"); %>

세션 : 웹브라우저를 닫기전까지 페이지를 이동하더라도 정보를 저장할수 있는 객체



RequestDispatcher dispatcher = request.getRequestDispatcher("2.jsp");
dispatcher.forward(request,response);
Dispatcher 는 1번페이지에서 받은 데이터를 2번페이지로 넘긴다 


Bean 생성
<jsp:useBean id="member" class="mit.bean.MemberBean"/>
mit.bean.MemberBean 경로에 있는 Bean을 member로 만든다

자바 빈 객체 생성후 저장된 정보 출력하기 <br /> <br />
이름 : <%=member.getName() %> <br />
아이디 : <%= member.getUserid() %>

<hr />
정보 변경 후 출력하기 <br /> <br />
<% member.setName("박주형"); 
   member.setUserid("asdf");%>

이름 : <%=member.getName() %> <br />
아이디 : <%= member.getUserid() %>   


<%@ page import ="mit.bean.MovieBean" %>    
클래스 경로 임포트하고
<% MovieBean movie = new MovieBean(); %>
빈생성한다

생성된 인스턴스에 대한 값의 수정과 출력은 getter와 setter로 조작한다.
int price = Integer.parseInt(request.getParameter("price"));
movie.setName(request.getParameter("name"));
movie.setPrice(price);
movie.setDirector(request.getParameter("director"));
movie.setActor(request.getParameter("actor"));
movie.setSynopsis(request.getParameter("synopsis"));
movie.setGnere(request.getParameter("genre"));


EL출력하는 법
필드값 출력
${member.name}
메소드 호출
${member.calc()}


고전적인 방식 : 
<%
String str1 = request.getParameter("num1");
String str2 = request.getParameter("num2");
int num1 = Integer.parseInt(str1);
int num2 = Integer.parseInt(str2);
%>

<%= num1 %> + <%= num2 %> = <%= num1+num2 %>
<hr />

EL 표기방법 : 
${param.num1} + ${param.num2} = ${param.num1+param.num2} 

EL 값비교

자바코드 <br />
== 연산자 사용 결과 : 
<%=request.getParameter("id") =="abcd" %>
<br />
equals 사용결과
<%=request.getParameter("id").equals("abcd") %>

EL 사용식 <br />
== 연산자 사용 결과 : ${param.id=="abcd"} <br /> 



JSTL ------
JSTL : JSP에서 스크립트릿 , 즉 자바 코드 블록을 사용하지 않고 
HTML형식을 유지하면서 조건문 , 반복문 , 간단한 연산과 몇몇 유용한 기능을 
손쉽게 사용할 수 있도록 지원하기 위해 만들어진 표준 커스텀 태그 라이브러리이다.

core사용하려면 맨위에다
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
선언해줘야한다.

core 라이브러리 종류
변수관련 
태그 : remove, set
사용예 : 변수지정과 삭제

흐름제어
태그 : if, choose , when , otherwise , forEach , forTokens
사용예 : 조건 처리 , 반복 ,토큰 파싱

URL관리
태그 : import , redirect , uri , param
사용예 : URL 핸들링

기타
태그 : catch , out
사용예 : 예외처리 , 출력


c:if 사용방법
-------------
<!-- 첫번쨰 방법 -->
 <c:set var="color1"
		value='<%= request.getParameter("color")%>' />
		getParameter컬러를 가져와서 color1에 저장을 한다
		c:if문을 통해서 값에 따라 다른 결과를 출력한다.
<c:if test="${color1==1}">
		<p style="color: red;">빨강</p>
	</c:if>
	<c:if test="${color1==2}">
		<p style="color: blue;">파랑</p>
	</c:if>
	<c:if test="${color1==3}">
		<p style="color: green;">초록</p>
	</c:if> 
	
<!-- 두번째 방법 -->
form을통해서 전달받은 값을 
param.color를 통해서 값을 가져오고 
c:if를 통해서 조건에 따라 다른 결과를 출력한다.
<%-- 	<c:if test="${param.color==1}">
		<p style="color: red;">빨강</p>
	</c:if>
	<c:if test="${param.color==2}">
		<p style="color: blue;">파랑</p>
	</c:if>
	<c:if test="${param.color==3}">
		<p style="color: green;">초록</p>
	</c:if> --%>
 
 
 
 c:choose 사용방법
 --------------
 	<!-- 첫번째 방법 -->
	<%-- 	<c:set var="fruit" value='<%=request.getParameter("fruit")%>'></c:set>
	<c:choose >
		<c:when test="${fruit==1}">
		<p style="color : red">사과</p>
		</c:when>
		<c:when test="${fruit==2}">
		<p style="color : green">메론</p>
		</c:when>
		<c:when test="${fruit==3}">
		<p style="color : yellow">바나나</p>
		</c:when>
	</c:choose> --%>

	<!-- 두번째 방법 -->
	<c:choose>
		<c:when test="${param.fruit==1}">
			<p style="color: red">사과</p>
		</c:when>
		<c:when test="${param.fruit==2}">
			<p style="color: green">메론</p>
		</c:when>
		<c:when test="${param.fruit==3}">
			<p style="color: yellow">바나나</p>
		</c:when>
	</c:choose>